{"version":3,"sources":["resources/profile.jpg","resources/bioblurbprofile.png","components/BusinessCard.js","components/NavLinks.js","components/Nav.js","pages/HomePage.js","pages/ErrorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BusinessCard","props","className","src","imgurl","alt","name","bioquote","NavLinks","checkCurrentPath","path","window","location","pathname","href","Nav","HomePage","myPicture","ErrorPage","children","App","profile","style","color","fontSize","margin","showPage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,mQCiB5BC,MAdf,SAAsBC,GAElB,OACI,yBAAKC,UAAS,wBAAmBD,EAAMC,YACnC,yBAAKC,IAAKF,EAAMG,OAAQC,IAAI,YADhC,IAEI,yBAAKH,UAAU,eACX,4BAAKD,EAAMK,MACX,2BAAIL,EAAMM,WAEd,yBAAKL,UAAU,WANnB,M,MCYOM,MAff,SAAkBP,GACd,IAAMQ,EAAmB,SAACC,GACtB,OAAOA,IAASC,OAAOC,SAASC,SAAW,eAAiB,IAEhE,OACI,wBAAIX,UAAU,cACV,wBAAIA,UAAWO,EAAiB,MAAM,uBAAGK,KAAK,KAAR,SACtC,wBAAIZ,UAAWO,EAAiB,WAAW,uBAAGK,KAAK,UAAR,aAC3C,wBAAIZ,UAAWO,EAAiB,YAAY,uBAAGK,KAAK,WAAR,iBAC5C,wBAAIZ,UAAWO,EAAiB,cAAc,uBAAGK,KAAK,aAAR,aAC9C,wBAAIZ,UAAWO,EAAiB,aAAa,uBAAGK,KAAK,YAAR,iBCc1CC,MAtBf,SAAad,GACT,OACI,6BACI,kBAAC,EAAD,CACIG,OAAQH,EAAMG,OACdE,KAAML,EAAMK,KACZC,SAAUN,EAAMM,SAChBL,UAAU,cAGd,kBAAC,EAAD,MAEA,yBAAKA,UAAU,WACX,uBAAGY,KAAK,uCAAsC,uBAAGZ,UAAU,qBAC3D,uBAAGY,KAAK,8BAA6B,uBAAGZ,UAAU,mBAClD,uBAAGY,KAAK,kCAAiC,uBAAGZ,UAAU,yB,wBChBvDc,EAEf,SAAkBf,GACd,OACI,6BAASC,UAAU,YACf,6BAASA,UAAU,SACf,yBAAKA,UAAU,WACX,iDACA,yLAKJ,yBAAKG,IAAI,gCAAgCF,IAAKc,MARlD,OCPGC,MAEf,SAAmBjB,GACf,OACI,iCACI,sCACCA,EAAMkB,WC8CJC,MA9Cf,WA+BE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,CACEE,OAAQiB,IACRf,KAAK,aACLC,SAAS,gCAGX,8BAtCJ,SAAkBG,GAChB,OAAQA,GACN,IAAK,IACH,OACE,kBAAC,EAAD,MAGJ,IAAK,SAGL,IAAK,UAGL,IAAK,YAGL,IAAK,WAEH,MACF,QACE,OACE,kBAACQ,EAAD,KACE,wBAAII,MAAO,CAACC,MAAO,MAAOC,SAAU,OAAQC,OAAQ,IAApD,OACA,+GAgBHC,CAASf,OAAOC,SAASC,aCpCdc,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ada94430.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.bcdc2348.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bioblurbprofile.1e7a75ad.png\";","import React from 'react';\nimport './BusinessCard.css';\n\nfunction BusinessCard(props) {\n\n    return (\n        <div className={`business-card ${props.className}`}>\n            <img src={props.imgurl} alt=\"profile\"></img> {/* should be rounded */}\n            <div className=\"description\">\n                <h1>{props.name}</h1>\n                <p>{props.bioquote}</p>\n            </div>\n            <div className=\"spacer\"></div> {/* Looks weird if doesn't exist bc of picture */}\n        </div>\n    );\n}\n\nexport default BusinessCard;\n","import React from 'react';\r\nimport './NavLinks.css';\r\n\r\nfunction NavLinks(props) {\r\n    const checkCurrentPath = (path) => {\r\n        return path === window.location.pathname ? \"current-link\" : \"\";\r\n    };\r\n    return (\r\n        <ul className=\"navigation\">\r\n            <li className={checkCurrentPath(\"/\")}><a href=\"/\">home</a></li>\r\n            <li className={checkCurrentPath(\"/about\")}><a href=\"/about\">about me</a></li>\r\n            <li className={checkCurrentPath(\"/resume\")}><a href=\"/resume\">résumé</a></li>\r\n            <li className={checkCurrentPath(\"/thoughts\")}><a href=\"/thoughts\">thoughts</a></li>\r\n            <li className={checkCurrentPath(\"/contact\")}><a href=\"/contact\">contact me</a></li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default NavLinks;","import React from 'react';\nimport './Nav.css';\nimport BusinessCard from './BusinessCard.js';\nimport NavLinks from './NavLinks.js';\n\nfunction Nav(props) {\n    return (\n        <nav>\n            <BusinessCard\n                imgurl={props.imgurl}\n                name={props.name}\n                bioquote={props.bioquote}\n                className=\"name-card\"\n            />\n            \n            <NavLinks />\n\n            <div className=\"socials\">\n                <a href=\"https://linkedin.com/in/kekevinchen\"><i className=\"fab fa-linkedin\" /></a>\n                <a href=\"https://github.com/kekevi/\"><i className=\"fab fa-github\" /></a>\n                <a href=\"https://instagram.com/kev.qen/\"><i className=\"fab fa-instagram\" /></a>\n            </div>\n\n        </nav>\n    );\n}\n\nexport default Nav;","import React from 'react';\r\nimport './HomePage.css';\r\nimport myPicture from './../resources/bioblurbprofile.png';\r\n\r\nexport default HomePage;\r\n\r\nfunction HomePage(props) {\r\n    return (\r\n        <article className=\"homepage\">\r\n            <section className=\"blurb\">\r\n                <div className=\"biotext\">\r\n                    <h1>Hello, I'm Kevin.</h1>\r\n                    <p>\r\n                        I'm a student at UNC Chapel Hill studying CS. I'm also interested in Stats, Linguistics, Physics, and more. \r\n                        This website showcases my works and my ideas.\r\n                    </p>\r\n                </div>\r\n                <img alt=\"Me doing something somewhere.\" src={myPicture}></img> {/* TODO: fill the alt text and image */}\r\n            </section>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default ErrorPage;\r\n\r\nfunction ErrorPage(props) {\r\n    return (\r\n        <article>\r\n            <h1>Error!</h1>\r\n            {props.children}\r\n        </article>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport profile from './resources/profile.jpg';\nimport Nav from './components/Nav.js';\n\nimport HomePage from './pages/HomePage.js';\nimport ErrorPage from './pages/ErrorPage.js';\n\nfunction App() {\n  function showPage(path) {\n    switch (path) {\n      case '/': {\n        return (\n          <HomePage />\n        );\n      } break;\n      case '/about': {\n\n      } break;\n      case '/resume': {\n\n      } break;\n      case '/thoughts': {\n\n      } break;\n      case '/contact': {\n\n      } break;\n      default: {\n        return (\n          <ErrorPage>\n            <h2 style={{color: 'red', fontSize: \"60px\", margin: 0}}>404</h2>\n            <p>This page does not exist. Use the links on the side to go to a page that does.</p>\n          </ErrorPage>\n        );\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav \n        imgurl={profile}\n        name=\"Kevin Chen\"\n        bioquote=\"SWE Intern @ Meals4Families\"\n      />\n\n      <main>\n        {showPage(window.location.pathname)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}